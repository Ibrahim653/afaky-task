// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'get_all_data_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

AllDataModel _$AllDataModelFromJson(Map<String, dynamic> json) => AllDataModel(
      data: (json['data'] as List<dynamic>?)
          ?.map((e) => Datum.fromJson(e as Map<String, dynamic>))
          .toList(),
      status: (json['status'] as num?)?.toInt(),
      message: json['message'] as String?,
      endUserMessage: json['endUserMessage'] as String?,
      isSuccess: json['isSuccess'] as bool?,
      token: json['token'],
    );

Map<String, dynamic> _$AllDataModelToJson(AllDataModel instance) =>
    <String, dynamic>{
      'data': instance.data,
      'status': instance.status,
      'message': instance.message,
      'endUserMessage': instance.endUserMessage,
      'isSuccess': instance.isSuccess,
      'token': instance.token,
    };

BranchesList _$BranchesListFromJson(Map<String, dynamic> json) => BranchesList(
      branchId: (json['branchId'] as num?)?.toInt(),
      branchCode: json['branchCode'] as String?,
      nameA: json['nameA'] as String?,
      nameE: json['nameE'] as String?,
    );

Map<String, dynamic> _$BranchesListToJson(BranchesList instance) =>
    <String, dynamic>{
      'branchId': instance.branchId,
      'branchCode': instance.branchCode,
      'nameA': instance.nameA,
      'nameE': instance.nameE,
    };

CompanyInfoList _$CompanyInfoListFromJson(Map<String, dynamic> json) =>
    CompanyInfoList(
      companyName: json['companyName'] as String?,
      taxNumber: json['taxNumber'] as String?,
      commercialTaxNumber: json['commercialTaxNumber'] as String?,
      branchName: json['branchName'] as String?,
      address: json['address'] as String?,
      tel1: json['tel1'] as String?,
      tel2: json['tel2'] as String?,
      mobile: json['mobile'] as String?,
      fax: json['fax'] as String?,
      email: json['email'] as String?,
      site: json['site'] as String?,
      branchVatNo: json['branchVatNo'] as String?,
    );

Map<String, dynamic> _$CompanyInfoListToJson(CompanyInfoList instance) =>
    <String, dynamic>{
      'companyName': instance.companyName,
      'taxNumber': instance.taxNumber,
      'commercialTaxNumber': instance.commercialTaxNumber,
      'branchName': instance.branchName,
      'address': instance.address,
      'tel1': instance.tel1,
      'tel2': instance.tel2,
      'mobile': instance.mobile,
      'fax': instance.fax,
      'email': instance.email,
      'site': instance.site,
      'branchVatNo': instance.branchVatNo,
    };

CompanyListDatum _$CompanyListDatumFromJson(Map<String, dynamic> json) =>
    CompanyListDatum(
      companyId: (json['companyId'] as num?)?.toInt(),
      companyCode: json['companyCode'] as String?,
      nameA: json['nameA'] as String?,
      nameE: json['nameE'] as String?,
      taxNumber: json['taxNumber'] as String?,
      insuranceNumber: json['insuranceNumber'] as String?,
      creationDate: json['creationDate'] as String?,
      creationDateHj: json['creationDateHj'] as String?,
      address: json['address'] as String?,
      tel1: json['tel1'] as String?,
      tel2: json['tel2'] as String?,
      mobile: json['mobile'] as String?,
      fax: json['fax'] as String?,
      email: json['email'] as String?,
      site: json['site'] as String?,
      notes: json['notes'] as String?,
      logo: json['logo'] == null
          ? null
          : Logo.fromJson(json['logo'] as Map<String, dynamic>),
      showHijriDate: json['showHijriDate'] as bool?,
      reportScreenFrom: (json['reportScreenFrom'] as num?)?.toInt(),
      reportScreenTo: (json['reportScreenTo'] as num?)?.toInt(),
      reportScreenDateFrom: json['reportScreenDateFrom'] as String?,
      reportScreenDateTo: json['reportScreenDateTo'] as String?,
      datePrintSettings: (json['datePrintSettings'] as num?)?.toInt(),
      showSection: json['showSection'] as bool?,
      showColor: json['showColor'] as bool?,
      showSort: json['showSort'] as bool?,
      showProductionDate: json['showProductionDate'] as bool?,
      showExpiryDate: json['showExpiryDate'] as bool?,
      showSerial: json['showSerial'] as bool?,
      showDiscount1: json['showDiscount1'] as bool?,
      showDiscount2: json['showDiscount2'] as bool?,
      showDiscount3: json['showDiscount3'] as bool?,
      useTaxPurchases: json['useTaxPurchases'] as bool?,
      useTaxReturnedPurchases: json['useTaxReturnedPurchases'] as bool?,
      useTaxSales: json['useTaxSales'] as bool?,
      useTaxReturnedSales: json['useTaxReturnedSales'] as bool?,
      showTaxRate: json['showTaxRate'] as bool?,
      showTaxValue: json['showTaxValue'] as bool?,
      useTaxSourcePurchases: json['useTaxSourcePurchases'] as bool?,
      useTaxSourceReturnedPurchases:
          json['useTaxSourceReturnedPurchases'] as bool?,
      useTaxSourceSales: json['useTaxSourceSales'] as bool?,
      useTaxSourceReturnedSales: json['useTaxSourceReturnedSales'] as bool?,
      showTaxSourceRate: json['showTaxSourceRate'] as bool?,
      showTaxSourceValue: json['showTaxSourceValue'] as bool?,
      taxSourceRate: (json['taxSourceRate'] as num?)?.toInt(),
      suppliersAccountMain: json['suppliersAccountMain'] as String?,
      customersAccountMain: json['customersAccountMain'] as String?,
      employeesAccountMain: json['employeesAccountMain'] as String?,
      usePosFixedTax: json['usePosFixedTax'] as bool?,
      useWTaxPurchases: json['useWTaxPurchases'] as bool?,
      showItemRate: json['showItemRate'] as bool?,
      useWTaxReturnedPurchases: json['useWTaxReturnedPurchases'] as bool?,
      useWTaxSales: json['useWTaxSales'] as bool?,
      useWTaxReturnedSales: json['useWTaxReturnedSales'] as bool?,
      showWTaxRate: json['showWTaxRate'] as bool?,
      showWTaxValue: json['showWTaxValue'] as bool?,
      showMotorNo: json['showMotorNo'] as bool?,
      showGuaranteePercent: json['showGuaranteePercent'] as bool?,
      showGuaranteeValue: json['showGuaranteeValue'] as bool?,
      showDevelopmentFees: json['showDevelopmentFees'] as bool?,
      offlineAutoSave: json['offlineAutoSave'] as bool?,
      hj: json['hj'] as bool?,
      posTaxRate: (json['posTaxRate'] as num?)?.toInt(),
      fdpi: json['fdpi'] as bool?,
      iDiscountPercent: (json['iDiscountPercent'] as num?)?.toInt(),
      empWorkingHours: (json['empWorkingHours'] as num?)?.toInt(),
      monthBeginDay: (json['monthBeginDay'] as num?)?.toInt(),
      invoiceRowsCount: (json['invoiceRowsCount'] as num?)?.toInt(),
      showModel: json['showModel'] as bool?,
      showBoardNo: json['showBoardNo'] as bool?,
      showBodyNo: json['showBodyNo'] as bool?,
      showSalesmanDetail: json['showSalesmanDetail'] as bool?,
      showSponsors: json['showSponsors'] as bool?,
      showOrderNo: json['showOrderNo'] as bool?,
      hideQuantity: json['hideQuantity'] as bool?,
      hideUnits: json['hideUnits'] as bool?,
      hideTotal: json['hideTotal'] as bool?,
      hideNetPrice: json['hideNetPrice'] as bool?,
      hideStore: json['hideStore'] as bool?,
      orderNoCounter: (json['orderNoCounter'] as num?)?.toInt(),
      hideSalesman: json['hideSalesman'] as bool?,
      hideCurrency: json['hideCurrency'] as bool?,
      hideSource: json['hideSource'] as bool?,
      hidePayments: json['hidePayments'] as bool?,
      hideGExpenses: json['hideGExpenses'] as bool?,
      hidePExpenses: json['hidePExpenses'] as bool?,
      hideFreeQuantity: json['hideFreeQuantity'] as bool?,
      hideAddedCost: json['hideAddedCost'] as bool?,
      hideTotalAfterDiscount: json['hideTotalAfterDiscount'] as bool?,
      hideBarcode: json['hideBarcode'] as bool?,
      hideDiscountPercent: json['hideDiscountPercent'] as bool?,
      hideGlCurrency: json['hideGlCurrency'] as bool?,
      itemSerialNotRepeated: json['itemSerialNotRepeated'] as bool?,
      minimumMaximumSerial: json['minimumMaximumSerial'] as bool?,
      minimumSerial: (json['minimumSerial'] as num?)?.toInt(),
      maximumSerial: (json['maximumSerial'] as num?)?.toInt(),
      suppliersUnLoad: json['suppliersUnLoad'] as bool?,
      customersUnLoad: json['customersUnLoad'] as bool?,
      accountsUnLoad: json['accountsUnLoad'] as bool?,
      itemsUnLoad: json['itemsUnLoad'] as bool?,
      showCubic: json['showCubic'] as bool?,
      showItemCode: json['showItemCode'] as bool?,
      barcodeSeparator: json['barcodeSeparator'] as String?,
      smsUserName: json['smsUserName'] as String?,
      smsPassword: json['smsPassword'] as String?,
      smsSender: json['smsSender'] as String?,
      showHeightWidth: json['showHeightWidth'] as bool?,
      showPharmacyData: json['showPharmacyData'] as bool?,
      showHidePrice: json['showHidePrice'] as bool?,
      sibPercent: (json['sibPercent'] as num?)?.toInt(),
      sibcsPercent: (json['sibcsPercent'] as num?)?.toInt(),
      sivPercent: (json['sivPercent'] as num?)?.toInt(),
      sivcsPercent: (json['sivcsPercent'] as num?)?.toInt(),
      bhiPercent: (json['bhiPercent'] as num?)?.toInt(),
      taxEb: (json['taxEb'] as num?)?.toInt(),
      taxEv: (json['taxEv'] as num?)?.toInt(),
      monthDaysValue: (json['monthDaysValue'] as num?)?.toInt(),
      monthDays: (json['monthDays'] as num?)?.toInt(),
      dasrbo: json['dasrbo'] as bool?,
      usglsi: json['usglsi'] as bool?,
      showMainCustomer: json['showMainCustomer'] as bool?,
      showGuarantee: json['showGuarantee'] as bool?,
      usglhi: json['usglhi'] as bool?,
      usglit: json['usglit'] as bool?,
      nmItemCode: json['nmItemCode'] as bool?,
      installmentAccountMain: json['installmentAccountMain'] as String?,
      joinAttendanceSalary: json['joinAttendanceSalary'] as bool?,
      rvsms: json['rvsms'] as bool?,
      rpvsms: json['rpvsms'] as bool?,
      possms: json['possms'] as bool?,
      possmscc: json['possmscc'] as bool?,
      smsInvoiceText: json['smsInvoiceText'] as String?,
      smsInvoiceTextCc: json['smsInvoiceTextCc'] as String?,
      sosms: json['sosms'] as bool?,
      smsSalesOrderText: json['smsSalesOrderText'] as String?,
      counterDate: json['counterDate'] as String?,
      nextDayTime: json['nextDayTime'] as String?,
      vatNo: json['vatNo'] as String?,
      posADiscount: json['posADiscount'] as bool?,
      posTotalValue: (json['posTotalValue'] as num?)?.toInt(),
      posDPercent: (json['posDPercent'] as num?)?.toInt(),
      useTaxMr: json['useTaxMr'] as bool?,
      itemCodeStartWith: json['itemCodeStartWith'] as String?,
      itemCodeLength: (json['itemCodeLength'] as num?)?.toInt(),
      weightFactorDivision: (json['weightFactorDivision'] as num?)?.toInt(),
      ignoredNumber: (json['ignoredNumber'] as num?)?.toInt(),
      logo2: json['logo2'] == null
          ? null
          : Logo2.fromJson(json['logo2'] as Map<String, dynamic>),
      useAddedTaxPurchases: json['useAddedTaxPurchases'] as bool?,
      useAddedTaxReturnedPurchases:
          json['useAddedTaxReturnedPurchases'] as bool?,
      useAddedTaxSales: json['useAddedTaxSales'] as bool?,
      useAddedTaxReturnedSales: json['useAddedTaxReturnedSales'] as bool?,
      showAddedTaxRate: json['showAddedTaxRate'] as bool?,
      showAddedTaxValue: json['showAddedTaxValue'] as bool?,
      useTableTaxPurchases: json['useTableTaxPurchases'] as bool?,
      useTableTaxReturnedPurchases:
          json['useTableTaxReturnedPurchases'] as bool?,
      useTableTaxSales: json['useTableTaxSales'] as bool?,
      useTableTaxReturnedSales: json['useTableTaxReturnedSales'] as bool?,
      showTableTaxRate: json['showTableTaxRate'] as bool?,
      showTableTaxValue: json['showTableTaxValue'] as bool?,
      showJobNo: json['showJobNo'] as bool?,
      nslCost: json['nslCost'] as bool?,
      quantityIsInteger: json['quantityIsInteger'] as bool?,
      generateSerial: json['generateSerial'] as bool?,
      generateSerialP: json['generateSerialP'] as bool?,
      priceIncludeTax: json['priceIncludeTax'] as bool?,
      relianceOnTaxRate: json['relianceOnTaxRate'] as bool?,
      usePosFixedTaxR: json['usePosFixedTaxR'] as bool?,
      manualFollowCost: json['manualFollowCost'] as bool?,
      sCustSup: json['sCustSup'] as bool?,
      cCustSup: json['cCustSup'] as bool?,
      eCustSup: json['eCustSup'] as bool?,
      maximumItems: json['maximumItems'] as bool?,
      aaic: json['aaic'] as bool?,
      bbia: json['bbia'] as bool?,
      iImport: (json['iImport'] as num?)?.toInt(),
      nTaxTFees: json['nTaxTFees'] as bool?,
      assemblyPrice: json['assemblyPrice'] as bool?,
      hideDDate: json['hideDDate'] as bool?,
      approximation: json['approximation'] as bool?,
      mdAllowed: (json['mdAllowed'] as num?)?.toInt(),
      offersAllowed: json['offersAllowed'] as bool?,
      aeSupplier: json['aeSupplier'] as bool?,
      aeCustomer: json['aeCustomer'] as bool?,
      showPdrp: json['showPdrp'] as bool?,
      multipleOrders: json['multipleOrders'] as bool?,
      joeDailyP: json['joeDailyP'] as bool?,
      poOnly: json['poOnly'] as bool?,
      getBalanceSq: json['getBalanceSq'] as bool?,
      hideIndustrialE: json['hideIndustrialE'] as bool?,
      hideCost: json['hideCost'] as bool?,
      fixedPPrice: json['fixedPPrice'] as bool?,
      fixedSPrice: json['fixedSPrice'] as bool?,
      showJvType: json['showJvType'] as bool?,
      salarySeDate: json['salarySeDate'] as bool?,
      showGuaranteeDate: json['showGuaranteeDate'] as bool?,
      showItemBalance: json['showItemBalance'] as bool?,
      showConsumptionsRate: json['showConsumptionsRate'] as bool?,
      showPSalesPrice: json['showPSalesPrice'] as bool?,
      showPmSalesPrice: json['showPmSalesPrice'] as bool?,
      oneBySerial: json['oneBySerial'] as bool?,
      compileItems: json['compileItems'] as bool?,
      posCompileItems: json['posCompileItems'] as bool?,
      paymentExceed: json['paymentExceed'] as bool?,
      posPaymentExceed: json['posPaymentExceed'] as bool?,
      supplyType: json['supplyType'] as String?,
      showSalesmanP: json['showSalesmanP'] as bool?,
      sciNoNr: json['sciNoNr'] as bool?,
      posNoCost: json['posNoCost'] as bool?,
      posNoFCost: json['posNoFCost'] as bool?,
      ipIncludeTax: json['ipIncludeTax'] as bool?,
      poschAmount: json['poschAmount'] as bool?,
      rePrintDetails: json['rePrintDetails'] as bool?,
      taxDesc: json['taxDesc'] as String?,
      tableTaxDesc: json['tableTaxDesc'] as String?,
      showIaeName: json['showIaeName'] as bool?,
      hideDpi: json['hideDpi'] as bool?,
      servicePercent: (json['servicePercent'] as num?)?.toInt(),
      useService: json['useService'] as bool?,
      noJvsPeriod: json['noJvsPeriod'] as bool?,
      checkNture: json['checkNture'] as bool?,
      checkNtureBbo: json['checkNtureBbo'] as bool?,
      hideDPos: json['hideDPos'] as bool?,
      showPogt: json['showPogt'] as bool?,
      muPrice: json['muPrice'] as bool?,
      prOnly: json['prOnly'] as bool?,
      posTitle: json['posTitle'] as String?,
      vBalance: (json['vBalance'] as num?)?.toInt(),
      edsrit: json['edsrit'] as bool?,
      relb: json['relb'] as bool?,
      invSms: json['invSms'] as bool?,
      poscsms: json['poscsms'] as bool?,
      tdNotEff: json['tdNotEff'] as bool?,
      adNotEff: json['adNotEff'] as bool?,
      adAfterTd: json['adAfterTd'] as bool?,
      showAuto: json['showAuto'] as bool?,
      gtStoreSerial: json['gtStoreSerial'] as bool?,
      advancePayments: json['advancePayments'] as bool?,
      shiftWh: json['shiftWh'] as bool?,
      siap: json['siap'] as bool?,
      multiSopos: json['multiSopos'] as bool?,
      nmcCode: json['nmcCode'] as bool?,
      showDDateSi: json['showDDateSi'] as bool?,
      showCulDateSi: json['showCulDateSi'] as bool?,
      treasury: json['treasury'] as bool?,
      atbiu: json['atbiu'] as bool?,
      contributionTax: json['contributionTax'] as bool?,
      roundFractions: json['roundFractions'] as bool?,
      rgAllowCost: json['rgAllowCost'] as bool?,
      showInvoiceCode: json['showInvoiceCode'] as bool?,
      taxClientId: json['taxClientId'] as String?,
      taxClientSecret: json['taxClientSecret'] as String?,
      taxTokenUrl: json['taxTokenUrl'] as String?,
      taxDocumentUrl: json['taxDocumentUrl'] as String?,
      typeTax: json['typeTax'] as String?,
      dtv: json['dtv'] as String?,
      signatureType: json['signatureType'] as String?,
      tokenPin: json['tokenPin'] as String?,
      tokenSerailName: json['tokenSerailName'] as String?,
      taxShowUrl: json['taxShowUrl'] as String?,
      csAllowSave: json['csAllowSave'] as bool?,
      bankAccountNumbers: json['bankAccountNumbers'] as String?,
      posReportNo: (json['posReportNo'] as num?)?.toInt(),
      smsApiKey: json['smsApiKey'] as String?,
      smsType: (json['smsType'] as num?)?.toInt(),
      showCpos: json['showCpos'] as bool?,
      showCostCenter: json['showCostCenter'] as bool?,
      fractions: (json['fractions'] as num?)?.toInt(),
      hidePosTotal: json['hidePosTotal'] as bool?,
      cpRate: (json['cpRate'] as num?)?.toInt(),
      adItem: json['adItem'] as bool?,
      gln: json['gln'] as String?,
      glNUserName: json['glNUserName'] as String?,
      glNPassword: json['glNPassword'] as String?,
      testGln: json['testGln'] as bool?,
      stackholderType: (json['stackholderType'] as num?)?.toInt(),
      qRcodeCompanyNameLangage:
          (json['qRcodeCompanyNameLangage'] as num?)?.toInt(),
      bindWithRsd: json['bindWithRsd'] as bool?,
      allowSalesSavingWithoutCheckofSerialBalanceRsd:
          json['allowSalesSavingWithoutCheckofSerialBalanceRsd'] as bool?,
      barcodeType: (json['barcodeType'] as num?)?.toInt(),
      xmlArchivePath: json['xmlArchivePath'] as String?,
      zatcaCountry: json['zatcaCountry'] as String?,
      zatcaBuildingNumber: json['zatcaBuildingNumber'] as String?,
      zatcaCityName: json['zatcaCityName'] as String?,
      zatcaPlotIdentifier: json['zatcaPlotIdentifier'] as String?,
      zatcaPostalZone: json['zatcaPostalZone'] as String?,
      zatcaStreetName: json['zatcaStreetName'] as String?,
      zatcaSubdivisionName: json['zatcaSubdivisionName'] as String?,
      apiUrl: json['apiUrl'] as String?,
      gS1Symbol: json['gS1Symbol'] as String?,
      autoBindWithZatca: json['autoBindWithZatca'] as bool?,
      dtrManually: json['dtrManually'] as bool?,
      generateOtpApi: json['generateOtpApi'] as String?,
      valdiateOtpApi: json['valdiateOtpApi'] as String?,
      complianceCsidApi: json['complianceCsidApi'] as String?,
      complianceInvoiceApi: json['complianceInvoiceApi'] as String?,
      complianceQrBuyerApi: json['complianceQrBuyerApi'] as String?,
      complianceQrSellerApi: json['complianceQrSellerApi'] as String?,
      productionCsidApi: json['productionCsidApi'] as String?,
      singleInvoiceReportingApi: json['singleInvoiceReportingApi'] as String?,
      singleInvoiceClearanceApi: json['singleInvoiceClearanceApi'] as String?,
      productionCsidRenewalApi: json['productionCsidRenewalApi'] as String?,
      addressE: json['addressE'] as String?,
      pointsOver: (json['pointsOver'] as num?)?.toInt(),
      paymentPriority: json['paymentPriority'] as bool?,
      pointsOpenBalance: json['pointsOpenBalance'] as bool?,
      pointsToAmountFactor: (json['pointsToAmountFactor'] as num?)?.toInt(),
      exchangeLimit: (json['exchangeLimit'] as num?)?.toInt(),
      purchasesLimit: (json['purchasesLimit'] as num?)?.toInt(),
      affectedOf: (json['affectedOf'] as num?)?.toInt(),
      duplicateFinancialPaper: json['duplicateFinancialPaper'] as bool?,
      setInvoiceTimeByServerTime: json['setInvoiceTimeByServerTime'] as bool?,
      totalsRound: (json['totalsRound'] as num?)?.toInt(),
      reserveOnInvoice: json['reserveOnInvoice'] as bool?,
      reserveOnSalesOrder: json['reserveOnSalesOrder'] as bool?,
      arJobNoCaption: json['arJobNoCaption'] as String?,
      enJobNoCaption: json['enJobNoCaption'] as String?,
      dispatchCommision: (json['dispatchCommision'] as num?)?.toInt(),
      posAccumulateType: (json['posAccumulateType'] as num?)?.toInt(),
      accumulateType: (json['accumulateType'] as num?)?.toInt(),
      pointsRound: (json['pointsRound'] as num?)?.toInt(),
      actualFatoora: (json['actualFatoora'] as num?)?.toInt(),
      useCorporateTax: json['useCorporateTax'] as bool?,
      corporateTaxRate: (json['corporateTaxRate'] as num?)?.toInt(),
      autoConvertDispatchToInvoice:
          json['autoConvertDispatchToInvoice'] as bool?,
      tokenType: (json['tokenType'] as num?)?.toInt(),
      allowToReSetCostInAssembleItems:
          json['allowToReSetCostInAssembleItems'] as bool?,
      pageSize: (json['pageSize'] as num?)?.toInt(),
      organizationName: json['organizationName'] as String?,
      industry: json['industry'] as String?,
      zatcaAddress: json['zatcaAddress'] as String?,
      acceptLanguage: json['acceptLanguage'] as String?,
      stampOver: (json['stampOver'] as num?)?.toInt(),
      invoiceType: json['invoiceType'] as String?,
      pagesCount: (json['pagesCount'] as num?)?.toInt(),
      selectedPage: (json['selectedPage'] as num?)?.toInt(),
      companyIws: json['companyIws'] as List<dynamic>?,
      chartOfAccountsFromCompany: json['chartOfAccountsFromCompany'],
      chartOfAccountsFromCompanyValue:
          (json['chartOfAccountsFromCompanyValue'] as num?)?.toInt(),
      chartOfAccountsFromTemplateValue:
          (json['chartOfAccountsFromTemplateValue'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CompanyListDatumToJson(CompanyListDatum instance) =>
    <String, dynamic>{
      'companyId': instance.companyId,
      'companyCode': instance.companyCode,
      'nameA': instance.nameA,
      'nameE': instance.nameE,
      'taxNumber': instance.taxNumber,
      'insuranceNumber': instance.insuranceNumber,
      'creationDate': instance.creationDate,
      'creationDateHj': instance.creationDateHj,
      'address': instance.address,
      'tel1': instance.tel1,
      'tel2': instance.tel2,
      'mobile': instance.mobile,
      'fax': instance.fax,
      'email': instance.email,
      'site': instance.site,
      'notes': instance.notes,
      'logo': instance.logo,
      'showHijriDate': instance.showHijriDate,
      'reportScreenFrom': instance.reportScreenFrom,
      'reportScreenTo': instance.reportScreenTo,
      'reportScreenDateFrom': instance.reportScreenDateFrom,
      'reportScreenDateTo': instance.reportScreenDateTo,
      'datePrintSettings': instance.datePrintSettings,
      'showSection': instance.showSection,
      'showColor': instance.showColor,
      'showSort': instance.showSort,
      'showProductionDate': instance.showProductionDate,
      'showExpiryDate': instance.showExpiryDate,
      'showSerial': instance.showSerial,
      'showDiscount1': instance.showDiscount1,
      'showDiscount2': instance.showDiscount2,
      'showDiscount3': instance.showDiscount3,
      'useTaxPurchases': instance.useTaxPurchases,
      'useTaxReturnedPurchases': instance.useTaxReturnedPurchases,
      'useTaxSales': instance.useTaxSales,
      'useTaxReturnedSales': instance.useTaxReturnedSales,
      'showTaxRate': instance.showTaxRate,
      'showTaxValue': instance.showTaxValue,
      'useTaxSourcePurchases': instance.useTaxSourcePurchases,
      'useTaxSourceReturnedPurchases': instance.useTaxSourceReturnedPurchases,
      'useTaxSourceSales': instance.useTaxSourceSales,
      'useTaxSourceReturnedSales': instance.useTaxSourceReturnedSales,
      'showTaxSourceRate': instance.showTaxSourceRate,
      'showTaxSourceValue': instance.showTaxSourceValue,
      'taxSourceRate': instance.taxSourceRate,
      'suppliersAccountMain': instance.suppliersAccountMain,
      'customersAccountMain': instance.customersAccountMain,
      'employeesAccountMain': instance.employeesAccountMain,
      'usePosFixedTax': instance.usePosFixedTax,
      'useWTaxPurchases': instance.useWTaxPurchases,
      'showItemRate': instance.showItemRate,
      'useWTaxReturnedPurchases': instance.useWTaxReturnedPurchases,
      'useWTaxSales': instance.useWTaxSales,
      'useWTaxReturnedSales': instance.useWTaxReturnedSales,
      'showWTaxRate': instance.showWTaxRate,
      'showWTaxValue': instance.showWTaxValue,
      'showMotorNo': instance.showMotorNo,
      'showGuaranteePercent': instance.showGuaranteePercent,
      'showGuaranteeValue': instance.showGuaranteeValue,
      'showDevelopmentFees': instance.showDevelopmentFees,
      'offlineAutoSave': instance.offlineAutoSave,
      'hj': instance.hj,
      'posTaxRate': instance.posTaxRate,
      'fdpi': instance.fdpi,
      'iDiscountPercent': instance.iDiscountPercent,
      'empWorkingHours': instance.empWorkingHours,
      'monthBeginDay': instance.monthBeginDay,
      'invoiceRowsCount': instance.invoiceRowsCount,
      'showModel': instance.showModel,
      'showBoardNo': instance.showBoardNo,
      'showBodyNo': instance.showBodyNo,
      'showSalesmanDetail': instance.showSalesmanDetail,
      'showSponsors': instance.showSponsors,
      'showOrderNo': instance.showOrderNo,
      'hideQuantity': instance.hideQuantity,
      'hideUnits': instance.hideUnits,
      'hideTotal': instance.hideTotal,
      'hideNetPrice': instance.hideNetPrice,
      'hideStore': instance.hideStore,
      'orderNoCounter': instance.orderNoCounter,
      'hideSalesman': instance.hideSalesman,
      'hideCurrency': instance.hideCurrency,
      'hideSource': instance.hideSource,
      'hidePayments': instance.hidePayments,
      'hideGExpenses': instance.hideGExpenses,
      'hidePExpenses': instance.hidePExpenses,
      'hideFreeQuantity': instance.hideFreeQuantity,
      'hideAddedCost': instance.hideAddedCost,
      'hideTotalAfterDiscount': instance.hideTotalAfterDiscount,
      'hideBarcode': instance.hideBarcode,
      'hideDiscountPercent': instance.hideDiscountPercent,
      'hideGlCurrency': instance.hideGlCurrency,
      'itemSerialNotRepeated': instance.itemSerialNotRepeated,
      'minimumMaximumSerial': instance.minimumMaximumSerial,
      'minimumSerial': instance.minimumSerial,
      'maximumSerial': instance.maximumSerial,
      'suppliersUnLoad': instance.suppliersUnLoad,
      'customersUnLoad': instance.customersUnLoad,
      'accountsUnLoad': instance.accountsUnLoad,
      'itemsUnLoad': instance.itemsUnLoad,
      'showCubic': instance.showCubic,
      'showItemCode': instance.showItemCode,
      'barcodeSeparator': instance.barcodeSeparator,
      'smsUserName': instance.smsUserName,
      'smsPassword': instance.smsPassword,
      'smsSender': instance.smsSender,
      'showHeightWidth': instance.showHeightWidth,
      'showPharmacyData': instance.showPharmacyData,
      'showHidePrice': instance.showHidePrice,
      'sibPercent': instance.sibPercent,
      'sibcsPercent': instance.sibcsPercent,
      'sivPercent': instance.sivPercent,
      'sivcsPercent': instance.sivcsPercent,
      'bhiPercent': instance.bhiPercent,
      'taxEb': instance.taxEb,
      'taxEv': instance.taxEv,
      'monthDaysValue': instance.monthDaysValue,
      'monthDays': instance.monthDays,
      'dasrbo': instance.dasrbo,
      'usglsi': instance.usglsi,
      'showMainCustomer': instance.showMainCustomer,
      'showGuarantee': instance.showGuarantee,
      'usglhi': instance.usglhi,
      'usglit': instance.usglit,
      'nmItemCode': instance.nmItemCode,
      'installmentAccountMain': instance.installmentAccountMain,
      'joinAttendanceSalary': instance.joinAttendanceSalary,
      'rvsms': instance.rvsms,
      'rpvsms': instance.rpvsms,
      'possms': instance.possms,
      'possmscc': instance.possmscc,
      'smsInvoiceText': instance.smsInvoiceText,
      'smsInvoiceTextCc': instance.smsInvoiceTextCc,
      'sosms': instance.sosms,
      'smsSalesOrderText': instance.smsSalesOrderText,
      'counterDate': instance.counterDate,
      'nextDayTime': instance.nextDayTime,
      'vatNo': instance.vatNo,
      'posADiscount': instance.posADiscount,
      'posTotalValue': instance.posTotalValue,
      'posDPercent': instance.posDPercent,
      'useTaxMr': instance.useTaxMr,
      'itemCodeStartWith': instance.itemCodeStartWith,
      'itemCodeLength': instance.itemCodeLength,
      'weightFactorDivision': instance.weightFactorDivision,
      'ignoredNumber': instance.ignoredNumber,
      'logo2': instance.logo2,
      'useAddedTaxPurchases': instance.useAddedTaxPurchases,
      'useAddedTaxReturnedPurchases': instance.useAddedTaxReturnedPurchases,
      'useAddedTaxSales': instance.useAddedTaxSales,
      'useAddedTaxReturnedSales': instance.useAddedTaxReturnedSales,
      'showAddedTaxRate': instance.showAddedTaxRate,
      'showAddedTaxValue': instance.showAddedTaxValue,
      'useTableTaxPurchases': instance.useTableTaxPurchases,
      'useTableTaxReturnedPurchases': instance.useTableTaxReturnedPurchases,
      'useTableTaxSales': instance.useTableTaxSales,
      'useTableTaxReturnedSales': instance.useTableTaxReturnedSales,
      'showTableTaxRate': instance.showTableTaxRate,
      'showTableTaxValue': instance.showTableTaxValue,
      'showJobNo': instance.showJobNo,
      'nslCost': instance.nslCost,
      'quantityIsInteger': instance.quantityIsInteger,
      'generateSerial': instance.generateSerial,
      'generateSerialP': instance.generateSerialP,
      'priceIncludeTax': instance.priceIncludeTax,
      'relianceOnTaxRate': instance.relianceOnTaxRate,
      'usePosFixedTaxR': instance.usePosFixedTaxR,
      'manualFollowCost': instance.manualFollowCost,
      'sCustSup': instance.sCustSup,
      'cCustSup': instance.cCustSup,
      'eCustSup': instance.eCustSup,
      'maximumItems': instance.maximumItems,
      'aaic': instance.aaic,
      'bbia': instance.bbia,
      'iImport': instance.iImport,
      'nTaxTFees': instance.nTaxTFees,
      'assemblyPrice': instance.assemblyPrice,
      'hideDDate': instance.hideDDate,
      'approximation': instance.approximation,
      'mdAllowed': instance.mdAllowed,
      'offersAllowed': instance.offersAllowed,
      'aeSupplier': instance.aeSupplier,
      'aeCustomer': instance.aeCustomer,
      'showPdrp': instance.showPdrp,
      'multipleOrders': instance.multipleOrders,
      'joeDailyP': instance.joeDailyP,
      'poOnly': instance.poOnly,
      'getBalanceSq': instance.getBalanceSq,
      'hideIndustrialE': instance.hideIndustrialE,
      'hideCost': instance.hideCost,
      'fixedPPrice': instance.fixedPPrice,
      'fixedSPrice': instance.fixedSPrice,
      'showJvType': instance.showJvType,
      'salarySeDate': instance.salarySeDate,
      'showGuaranteeDate': instance.showGuaranteeDate,
      'showItemBalance': instance.showItemBalance,
      'showConsumptionsRate': instance.showConsumptionsRate,
      'showPSalesPrice': instance.showPSalesPrice,
      'showPmSalesPrice': instance.showPmSalesPrice,
      'oneBySerial': instance.oneBySerial,
      'compileItems': instance.compileItems,
      'posCompileItems': instance.posCompileItems,
      'paymentExceed': instance.paymentExceed,
      'posPaymentExceed': instance.posPaymentExceed,
      'supplyType': instance.supplyType,
      'showSalesmanP': instance.showSalesmanP,
      'sciNoNr': instance.sciNoNr,
      'posNoCost': instance.posNoCost,
      'posNoFCost': instance.posNoFCost,
      'ipIncludeTax': instance.ipIncludeTax,
      'poschAmount': instance.poschAmount,
      'rePrintDetails': instance.rePrintDetails,
      'taxDesc': instance.taxDesc,
      'tableTaxDesc': instance.tableTaxDesc,
      'showIaeName': instance.showIaeName,
      'hideDpi': instance.hideDpi,
      'servicePercent': instance.servicePercent,
      'useService': instance.useService,
      'noJvsPeriod': instance.noJvsPeriod,
      'checkNture': instance.checkNture,
      'checkNtureBbo': instance.checkNtureBbo,
      'hideDPos': instance.hideDPos,
      'showPogt': instance.showPogt,
      'muPrice': instance.muPrice,
      'prOnly': instance.prOnly,
      'posTitle': instance.posTitle,
      'vBalance': instance.vBalance,
      'edsrit': instance.edsrit,
      'relb': instance.relb,
      'invSms': instance.invSms,
      'poscsms': instance.poscsms,
      'tdNotEff': instance.tdNotEff,
      'adNotEff': instance.adNotEff,
      'adAfterTd': instance.adAfterTd,
      'showAuto': instance.showAuto,
      'gtStoreSerial': instance.gtStoreSerial,
      'advancePayments': instance.advancePayments,
      'shiftWh': instance.shiftWh,
      'siap': instance.siap,
      'multiSopos': instance.multiSopos,
      'nmcCode': instance.nmcCode,
      'showDDateSi': instance.showDDateSi,
      'showCulDateSi': instance.showCulDateSi,
      'treasury': instance.treasury,
      'atbiu': instance.atbiu,
      'contributionTax': instance.contributionTax,
      'roundFractions': instance.roundFractions,
      'rgAllowCost': instance.rgAllowCost,
      'showInvoiceCode': instance.showInvoiceCode,
      'taxClientId': instance.taxClientId,
      'taxClientSecret': instance.taxClientSecret,
      'taxTokenUrl': instance.taxTokenUrl,
      'taxDocumentUrl': instance.taxDocumentUrl,
      'typeTax': instance.typeTax,
      'dtv': instance.dtv,
      'signatureType': instance.signatureType,
      'tokenPin': instance.tokenPin,
      'tokenSerailName': instance.tokenSerailName,
      'taxShowUrl': instance.taxShowUrl,
      'csAllowSave': instance.csAllowSave,
      'bankAccountNumbers': instance.bankAccountNumbers,
      'posReportNo': instance.posReportNo,
      'smsApiKey': instance.smsApiKey,
      'smsType': instance.smsType,
      'showCpos': instance.showCpos,
      'showCostCenter': instance.showCostCenter,
      'fractions': instance.fractions,
      'hidePosTotal': instance.hidePosTotal,
      'cpRate': instance.cpRate,
      'adItem': instance.adItem,
      'gln': instance.gln,
      'glNUserName': instance.glNUserName,
      'glNPassword': instance.glNPassword,
      'testGln': instance.testGln,
      'stackholderType': instance.stackholderType,
      'qRcodeCompanyNameLangage': instance.qRcodeCompanyNameLangage,
      'bindWithRsd': instance.bindWithRsd,
      'allowSalesSavingWithoutCheckofSerialBalanceRsd':
          instance.allowSalesSavingWithoutCheckofSerialBalanceRsd,
      'barcodeType': instance.barcodeType,
      'xmlArchivePath': instance.xmlArchivePath,
      'zatcaCountry': instance.zatcaCountry,
      'zatcaBuildingNumber': instance.zatcaBuildingNumber,
      'zatcaCityName': instance.zatcaCityName,
      'zatcaPlotIdentifier': instance.zatcaPlotIdentifier,
      'zatcaPostalZone': instance.zatcaPostalZone,
      'zatcaStreetName': instance.zatcaStreetName,
      'zatcaSubdivisionName': instance.zatcaSubdivisionName,
      'apiUrl': instance.apiUrl,
      'gS1Symbol': instance.gS1Symbol,
      'autoBindWithZatca': instance.autoBindWithZatca,
      'dtrManually': instance.dtrManually,
      'generateOtpApi': instance.generateOtpApi,
      'valdiateOtpApi': instance.valdiateOtpApi,
      'complianceCsidApi': instance.complianceCsidApi,
      'complianceInvoiceApi': instance.complianceInvoiceApi,
      'complianceQrBuyerApi': instance.complianceQrBuyerApi,
      'complianceQrSellerApi': instance.complianceQrSellerApi,
      'productionCsidApi': instance.productionCsidApi,
      'singleInvoiceReportingApi': instance.singleInvoiceReportingApi,
      'singleInvoiceClearanceApi': instance.singleInvoiceClearanceApi,
      'productionCsidRenewalApi': instance.productionCsidRenewalApi,
      'addressE': instance.addressE,
      'pointsOver': instance.pointsOver,
      'paymentPriority': instance.paymentPriority,
      'pointsOpenBalance': instance.pointsOpenBalance,
      'pointsToAmountFactor': instance.pointsToAmountFactor,
      'exchangeLimit': instance.exchangeLimit,
      'purchasesLimit': instance.purchasesLimit,
      'affectedOf': instance.affectedOf,
      'duplicateFinancialPaper': instance.duplicateFinancialPaper,
      'setInvoiceTimeByServerTime': instance.setInvoiceTimeByServerTime,
      'totalsRound': instance.totalsRound,
      'reserveOnInvoice': instance.reserveOnInvoice,
      'reserveOnSalesOrder': instance.reserveOnSalesOrder,
      'arJobNoCaption': instance.arJobNoCaption,
      'enJobNoCaption': instance.enJobNoCaption,
      'dispatchCommision': instance.dispatchCommision,
      'posAccumulateType': instance.posAccumulateType,
      'accumulateType': instance.accumulateType,
      'pointsRound': instance.pointsRound,
      'actualFatoora': instance.actualFatoora,
      'useCorporateTax': instance.useCorporateTax,
      'corporateTaxRate': instance.corporateTaxRate,
      'autoConvertDispatchToInvoice': instance.autoConvertDispatchToInvoice,
      'tokenType': instance.tokenType,
      'allowToReSetCostInAssembleItems':
          instance.allowToReSetCostInAssembleItems,
      'pageSize': instance.pageSize,
      'organizationName': instance.organizationName,
      'industry': instance.industry,
      'zatcaAddress': instance.zatcaAddress,
      'acceptLanguage': instance.acceptLanguage,
      'stampOver': instance.stampOver,
      'invoiceType': instance.invoiceType,
      'pagesCount': instance.pagesCount,
      'selectedPage': instance.selectedPage,
      'companyIws': instance.companyIws,
      'chartOfAccountsFromCompany': instance.chartOfAccountsFromCompany,
      'chartOfAccountsFromCompanyValue':
          instance.chartOfAccountsFromCompanyValue,
      'chartOfAccountsFromTemplateValue':
          instance.chartOfAccountsFromTemplateValue,
    };

CurrencyList _$CurrencyListFromJson(Map<String, dynamic> json) => CurrencyList(
      currencyId: (json['currencyId'] as num?)?.toInt(),
      currencyCode: json['currencyCode'] as String?,
      currencyName: json['currencyName'] as String?,
      rate: (json['rate'] as num?)?.toInt(),
      partName: json['partName'] as String?,
      isLocal: json['isLocal'] as bool?,
      partsCount: (json['partsCount'] as num?)?.toInt(),
    );

Map<String, dynamic> _$CurrencyListToJson(CurrencyList instance) =>
    <String, dynamic>{
      'currencyId': instance.currencyId,
      'currencyCode': instance.currencyCode,
      'currencyName': instance.currencyName,
      'rate': instance.rate,
      'partName': instance.partName,
      'isLocal': instance.isLocal,
      'partsCount': instance.partsCount,
    };

Datum _$DatumFromJson(Map<String, dynamic> json) => Datum(
      defaultStoreId: (json['defaultStoreId'] as num?)?.toInt(),
      defaultStoreName: json['defaultStoreName'] as String?,
      defaultCurrencyId: (json['defaultCurrencyId'] as num?)?.toInt(),
      defaultCurrencyName: json['defaultCurrencyName'] as String?,
      activeCompanyId: (json['activeCompanyId'] as num?)?.toInt(),
      activeBranchId: (json['activeBranchId'] as num?)?.toInt(),
      companyState: json['companyState'] as bool?,
      mustEnterLocation: json['mustEnterLocation'] as bool?,
      purchasesPaymentType: (json['purchasesPaymentType'] as num?)?.toInt(),
      salesPaymentType: (json['salesPaymentType'] as num?)?.toInt(),
      boxId: json['boxId'] as String?,
      bankId: json['bankId'] as String?,
      policyId: (json['policyId'] as num?)?.toInt(),
      companyListData: (json['companyListData'] as List<dynamic>?)
          ?.map((e) => CompanyListDatum.fromJson(e as Map<String, dynamic>))
          .toList(),
      branchesList: (json['branchesList'] as List<dynamic>?)
          ?.map((e) => BranchesList.fromJson(e as Map<String, dynamic>))
          .toList(),
      paymentTypeList: (json['paymentTypeList'] as List<dynamic>?)
          ?.map((e) => PaymentTypeList.fromJson(e as Map<String, dynamic>))
          .toList(),
      itemsList: json['itemsList'] as List<dynamic>?,
      customerList: json['customerList'] as List<dynamic>?,
      salesmen: json['salesmen'] as List<dynamic>?,
      currencyList: (json['currencyList'] as List<dynamic>?)
          ?.map((e) => CurrencyList.fromJson(e as Map<String, dynamic>))
          .toList(),
      accountsList: json['accountsList'] as List<dynamic>?,
      storesList: json['storesList'] as List<dynamic>?,
      companyList: json['companyList'] as List<dynamic>?,
      companyInfoList: (json['companyInfoList'] as List<dynamic>?)
          ?.map((e) => CompanyInfoList.fromJson(e as Map<String, dynamic>))
          .toList(),
      warrantyList: json['warrantyList'] as List<dynamic>?,
      invoiceSourceList: (json['invoiceSourceList'] as List<dynamic>?)
          ?.map((e) => InvoiceSourceList.fromJson(e as Map<String, dynamic>))
          .toList(),
      invoicePolicyList: (json['invoicePolicyList'] as List<dynamic>?)
          ?.map((e) => InvoicePolicyList.fromJson(e as Map<String, dynamic>))
          .toList(),
      salesPolicyList: (json['salesPolicyList'] as List<dynamic>?)
          ?.map((e) => SalesPolicyList.fromJson(e as Map<String, dynamic>))
          .toList(),
    );

Map<String, dynamic> _$DatumToJson(Datum instance) => <String, dynamic>{
      'defaultStoreId': instance.defaultStoreId,
      'defaultStoreName': instance.defaultStoreName,
      'defaultCurrencyId': instance.defaultCurrencyId,
      'defaultCurrencyName': instance.defaultCurrencyName,
      'activeCompanyId': instance.activeCompanyId,
      'activeBranchId': instance.activeBranchId,
      'companyState': instance.companyState,
      'mustEnterLocation': instance.mustEnterLocation,
      'purchasesPaymentType': instance.purchasesPaymentType,
      'salesPaymentType': instance.salesPaymentType,
      'boxId': instance.boxId,
      'bankId': instance.bankId,
      'policyId': instance.policyId,
      'companyListData': instance.companyListData,
      'branchesList': instance.branchesList,
      'paymentTypeList': instance.paymentTypeList,
      'itemsList': instance.itemsList,
      'customerList': instance.customerList,
      'salesmen': instance.salesmen,
      'currencyList': instance.currencyList,
      'accountsList': instance.accountsList,
      'storesList': instance.storesList,
      'companyList': instance.companyList,
      'companyInfoList': instance.companyInfoList,
      'warrantyList': instance.warrantyList,
      'invoiceSourceList': instance.invoiceSourceList,
      'invoicePolicyList': instance.invoicePolicyList,
      'salesPolicyList': instance.salesPolicyList,
    };

InvoicePolicyList _$InvoicePolicyListFromJson(Map<String, dynamic> json) =>
    InvoicePolicyList(
      id: (json['id'] as num?)?.toInt(),
      nameA: json['nameA'] as String?,
      nameE: json['nameE'] as String?,
    );

Map<String, dynamic> _$InvoicePolicyListToJson(InvoicePolicyList instance) =>
    <String, dynamic>{
      'id': instance.id,
      'nameA': instance.nameA,
      'nameE': instance.nameE,
    };

InvoiceSourceList _$InvoiceSourceListFromJson(Map<String, dynamic> json) =>
    InvoiceSourceList(
      id: (json['id'] as num?)?.toInt(),
      code: (json['code'] as num?)?.toInt(),
      nameA: json['nameA'] as String?,
      nameE: json['nameE'] as String?,
    );

Map<String, dynamic> _$InvoiceSourceListToJson(InvoiceSourceList instance) =>
    <String, dynamic>{
      'id': instance.id,
      'code': instance.code,
      'nameA': instance.nameA,
      'nameE': instance.nameE,
    };

PaymentTypeList _$PaymentTypeListFromJson(Map<String, dynamic> json) =>
    PaymentTypeList(
      bptId: (json['bptId'] as num?)?.toInt(),
      paymentTypeName: json['paymentTypeName'] as String?,
    );

Map<String, dynamic> _$PaymentTypeListToJson(PaymentTypeList instance) =>
    <String, dynamic>{
      'bptId': instance.bptId,
      'paymentTypeName': instance.paymentTypeName,
    };

SalesPolicyList _$SalesPolicyListFromJson(Map<String, dynamic> json) =>
    SalesPolicyList(
      id: (json['id'] as num?)?.toInt(),
      nameA: json['nameA'] as String?,
      nameE: json['nameE'] as String?,
    );

Map<String, dynamic> _$SalesPolicyListToJson(SalesPolicyList instance) =>
    <String, dynamic>{
      'id': instance.id,
      'nameA': instance.nameA,
      'nameE': instance.nameE,
    };
